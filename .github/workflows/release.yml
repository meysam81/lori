name: release

concurrency:
  group: build-binary-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write

jobs:
  publish-github:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.ref_name }} -t ${{ github.ref_name }} --generate-notes

  build-binary:
    needs: publish-github
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - image: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - image: macos-latest
            target: x86_64-apple-darwin
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable
        run: |
          rustup toolchain install stable --target ${{ matrix.target }}
      - if: contains(matrix.target, 'apple')
        name: Install Apple dependencies
        run: |
          brew install openssl coreutils
      - if: contains(matrix.target, 'musl')
        name: Install musl dependencies
        run: |
          sudo apt update
          sudo apt install -y musl-tools libssl-dev
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
      - name: Get package name
        id: cargo-get
        uses: nicolaiunrein/cargo-get@ec90d78dd6484403dc0777e55ef0266c38588d3d
        with:
          subcommand: package.name
      - name: Rename binary
        run: |
          cp target/${{ matrix.target }}/release/${{ steps.cargo-get.outputs.metadata }} target/${{ matrix.target }}/release/${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}
      - name: Checksum
        run: |
          cd target/${{ matrix.target }}/release
          sha256sum ${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }} > ${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}.sha256
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}
            target/${{ matrix.target }}/release/${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}.sha256
          if-no-files-found: error
      - if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        name: Upload assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}
            target/${{ matrix.target }}/release/${{ steps.cargo-get.outputs.metadata }}-${{ matrix.target }}.sha256
  
  publish-crate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable
        run: |
          rustup toolchain install stable
      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish

  build-docker:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - image-repo: ${{ github.repository }}
            dockerfile: Dockerfile
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up QEMU needed for Docker
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          logout: false
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
      - id: readme
        name: Read README
        uses: juliangruber/read-file-action@v1
        with:
          path: README.md
      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          logout: false
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
      - id: meta
        name: Docker metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ matrix.image-repo }}
          labels: |
            org.opencontainers.image.description: ${{ steps.readme.outputs.content }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.image-repo }}:${{ github.head_ref || github.ref_name }}
            ${{ matrix.image-repo }}:${{ github.head_ref || github.ref_name }}
